__version__ = (5, 2, 0)

# meta developer: @SenkoGuardianModules

#  .------. .------. .------. .------. .------. .------.
#  |S.--. | |E.--. | |N.--. | |M.--. | |O.--. | |D.--. |
#  | :/\: | | :/\: | | :(): | | :/\: | | :/\: | | :/\: |
#  | :\/: | | :\/: | | ()() | | :\/: | | :\/: | | :\/: |
#  | '--'S| | '--'E| | '--'N| | '--'M| | '--'O| | '--'D|
#  `------' `------' `------' `------' `------' `------'

# requires: Hikka-TL

import asyncio
import json
from datetime import datetime, timedelta
from telethon.utils import get_display_name
import logging
import random
import re

from telethon import errors, utils as telethon_utils
from telethon.tl import types as tl_types

from .. import loader, utils

logger = logging.getLogger(__name__)

@loader.tds
class MaillingChatGT99(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —á–∞—Ç–∞–º v5.1.9 (–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤—Å–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π, –±–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∏ –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º)"""
    strings = {
        "name": "MaillingChatGT99Fix",
        "add_chat": "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π —á–∞—Ç/—Ç–µ–º—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .add_chat –∏–ª–∏ .add_chat <ID/Username/–°—Å—ã–ª–∫–∞>.",
        "remove_chat": "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —á–∞—Ç/—Ç–µ–º—É –ø–æ –Ω–æ–º–µ—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .remove_chat <–Ω–æ–º–µ—Ä>.",
        "list_chats": "üìú –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤/—Ç–µ–º –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.",
        "add_msg": "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (–æ—Ç–≤–µ—Ç–æ–º).",
        "remove_msg": "‚ûñ –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –Ω–æ–º–µ—Ä—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .remove_msg <–Ω–æ–º–µ—Ä>.",
        "clear_msgs": "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π.",
        "list_msgs": "üìú –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.",
        "set_seller": "‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ID —á–∞—Ç–∞/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .set_seller <ID/Username/–°—Å—ã–ª–∫–∞/'me'>.",
        "mail_status": "üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏.",
        "start_mail": "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .start_mail <–≤—Ä–µ–º—è_—Å–µ–∫> <–∏–Ω—Ç–µ—Ä–≤–∞–ª_—Ü–∏–∫–ª–∞_–æ—Ç-–¥–æ_—Å–µ–∫>.",
        "stop_mail": "‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É.",
        "error_getting_entity": "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ/—Å—É—â–Ω–æ—Å—Ç–∏: {}",
        "error_sending_message": "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è ({}) –≤ —á–∞—Ç {} ({}): {}",
        "notification_sent": "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.",
        "invalid_arguments": "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã.",
        "chats_empty": "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —á–∞—Ç—ã.",
        "messages_empty": "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è.",
        "already_running": "‚ö†Ô∏è –†–∞—Å—Å—ã–ª–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞.",
        "started_mailing": "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞.\n‚è≥ –û–±—â–µ–µ –≤—Ä–µ–º—è: {} —Å–µ–∫.\n‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏: {}-{} —Å–µ–∫.\n‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —á–∞—Ç–∞–º–∏: ~{}-{} —Å–µ–∫\n‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –≤ —á–∞—Ç–µ: ~{}-{} —Å–µ–∫",
        "stopped_mailing": "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.",
        "not_running": "‚ö†Ô∏è –†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.",
        "chat_added": "‚úÖ –ß–∞—Ç/—Ç–µ–º–∞ '{}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—ã–ª–∫–∏",
        "chat_already_added": "‚ö†Ô∏è –ß–∞—Ç/—Ç–µ–º–∞ '{}' —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ.",
        "chat_removed": "‚úÖ #{} '{}' —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏",
        "invalid_chat_selection": "‚õîÔ∏è –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —á–∞—Ç–∞.",
        "chats_cleared": "‚úÖ –í—Å–µ —á–∞—Ç—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞",
        "messages_cleared": "‚úÖ –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—á–∏—â–µ–Ω",
        "no_chats": "üìÉ –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –ø—É—Å—Ç",
        "no_messages": "‚úçÔ∏è –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫. –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø—É—Å—Ç.",
        "message_added": "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ (Snippet: {})",
        "message_removed": "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ ‚Ññ{} —É–¥–∞–ª–µ–Ω–æ (Snippet: {})",
        "invalid_message_number": "‚úçÔ∏è –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è.",
        "seller_set": "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–∞—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞",
        "duration_invalid": "‚úçÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .start_mail <–≤—Ä–µ–º—è_—Å–µ–∫> <–∏–Ω—Ç–µ—Ä–≤–∞–ª_—Ü–∏–∫–ª–∞_–æ—Ç-–¥–æ_—Å–µ–∫>. –£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 45-70).",
        "seller_notification": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
        "mailing_complete": "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
        "safe_mode_enabled": "üü¢ <b>–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º –í–ö–õ–Æ–ß–Å–ù</b>\n‚Ä¢ –¢–æ–ª—å–∫–æ –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª—ã\n‚Ä¢ –ú–∞–∫—Å {} —á–∞—Ç–æ–≤/—Ü–∏–∫–ª\n‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —á–∞—Ç–∞–º–∏: ~{}-{} —Å–µ–∫\n‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏: ~{}-{} —Å–µ–∫\n‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –≤ —á–∞—Ç–µ: ~{}-{} —Å–µ–∫",
        "safe_mode_disabled": "üî¥ <b>–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º –í–´–ö–õ–Æ–ß–ï–ù</b>",
        "mail_not_running": "‚ö†Ô∏è –†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.",
        "no_permission": "Ô∏èÔ∏èÔ∏èÔ∏èÔ∏èÔ∏èÔ∏èÔ∏èÔ∏èÔ∏èÔ∏èÔ∏è‚ö†Ô∏è –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –≤ —á–∞—Ç {} ({}), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.",
        "processing_entity": "‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É—â–Ω–æ—Å—Ç–∏...",
        "safe_message_interval": (5, 10),
        "base_message_interval": (1, 3),
        "failed_to_send_message": "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {} –≤ —á–∞—Ç {}. –ü—Ä–∏—á–∏–Ω–∞: {}",
        "failed_perm_check": "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –≤ —á–∞—Çe {} ({}) –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏: {}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.",
        "permission_denied_skip": "üö´ –ü—Ä–æ–ø—É—Å–∫ —á–∞—Ç–∞ {} (ID: {}, Topic: {}) –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø—Ä–∞–≤ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É. –ü—Ä–∏—á–∏–Ω–∞: {}",
    }

    PERMISSION_ERRORS = {
        "ChatForbiddenError",
        "UserBannedInChannelError",
        "ChatWriteForbiddenError",
        "ChatAdminRequiredError",
        "UserBlocked",
        "TopicClosedError",
        "TopicEditedError",
        "ForumTopicDeletedError",
    }


    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–æ–¥—É–ª—å, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        self.chats = {}
        self.messages = []
        self.mail_task: asyncio.Task | None = None
        self.seller_chat_id: int | None = None
        self.total_messages_sent = 0
        self.start_time: datetime | None = None
        self.end_time: datetime | None = None
        self.is_running = False
        self.lock = asyncio.Lock()
        self.module_config = {
            "safe_mode": False,
            "max_chunks": 10,
            "short_interval_base": (2, 5),
            "safe_short_interval": (10, 20),
            "safe_cycle_interval": (180, 300),
            "safe_message_interval": self.strings["safe_message_interval"],
            "base_message_interval": self.strings["base_message_interval"],
        }
        self._current_cycle_start_time: datetime | None = None
        self._processed_chats_in_cycle = 0

    def _validate_interval_tuple(self, value, default_tuple):
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫–æ—Ä—Ç–µ–∂ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ (min, max).
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç tuple(float, float) –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏/–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π.
        """
        if isinstance(value, (list, tuple)) and len(value) == 2:
            try:
                v_min = float(value[0])
                v_max = float(value[1])
                if 0 <= v_min <= v_max:
                    return (v_min, v_max)
            except (ValueError, TypeError):
                pass
        return (float(default_tuple[0]), float(default_tuple[1]))

    async def _load_state(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–¥—É–ª—è –∏–∑ –ë–î."""
        stored_chats_raw = self._db.get(self.strings["name"], "chats", {})
        self.chats = {}

        if isinstance(stored_chats_raw, dict):
             for key_str, name in stored_chats_raw.items():
                 try:
                     if isinstance(key_str, str) and key_str.startswith("("):
                         match = re.match(r"\((\-?\d+),\s*(\d+|\s*None)\)", key_str)
                         if match:
                             chat_id = int(match.group(1))
                             topic_str = match.group(2).strip()
                             topic_id = int(topic_str) if topic_str and topic_str.lower() != 'none' else None
                             self.chats[(chat_id, topic_id)] = name
                         else:
                              logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –∫–ª—é—á —á–∞—Ç–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Å —Å–∫–æ–±–∫–∞–º–∏ '{key_str}' –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ.")
                     elif isinstance(key_str, (str, int, float)):
                         chat_id = int(key_str)
                         self.chats[(chat_id, None)] = f"Chat {chat_id} (old list format)"
                         logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω —á–∞—Ç –≤ —Å—Ç–∞—Ä–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —Å–ø–∏—Å–∫–∞: {chat_id}")
                     else:
                          logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–ª—é—á —á–∞—Ç–∞ '{key_str}' (—Ç–∏–ø: {type(key_str).__name__}) –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")

                 except (ValueError, TypeError) as e:
                     logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–ª—é—á —á–∞—Ç–∞ '{key_str}' –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏: {e}")

        elif isinstance(stored_chats_raw, list):
             for chat_id_or_key in stored_chats_raw:
                try:
                    chat_id = int(chat_id_or_key)
                    self.chats[(chat_id, None)] = f"Chat {chat_id} (old list format)"
                    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω —á–∞—Ç –≤ —Å—Ç–∞—Ä–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —Å–ø–∏—Å–∫–∞: {chat_id}")
                except (ValueError, TypeError):
                    logger.warning(f"–ü—Ä–æ–ø—É—â–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –≤ –æ—á–µ–Ω—å —Å—Ç–∞—Ä–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —á–∞—Ç–∞ (–Ω–µ —á–∏—Å–ª–æ): {chat_id_or_key}")
        else:
             logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤ –≤ –ë–î: {type(stored_chats_raw)}. –û–∂–∏–¥–∞–ª—Å—è dict –∏–ª–∏ list. –ß–∞—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")

        async with self.lock:
             valid_chats_to_save = {str(k): v for k, v in self.chats.items() if isinstance(k, tuple) and len(k) == 2}
             self._db.set(self.strings["name"], "chats", valid_chats_to_save)


        self.messages = self._db.get(self.strings["name"], "messages", [])
        self.messages = [msg for msg in self.messages if isinstance(msg, dict) and all(k in msg for k in ["id", "chat_id", "snippet"])]
        async with self.lock:
             self._db.set(self.strings["name"], "messages", self.messages)

        seller_chat_id_raw = self._db.get(self.strings["name"], "seller_chat_id", None)
        async with self.lock:
            self.seller_chat_id = None
            if seller_chat_id_raw is not None:
                try:
                     self.seller_chat_id = int(seller_chat_id_raw)
                except (ValueError, TypeError):
                     logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å seller_chat_id –∏–∑ –ë–î: {seller_chat_id_raw}. –°–±—Ä–∞—Å—ã–≤–∞–µ–º.")
                     self._db.set(self.strings["name"], "seller_chat_id", None)


    async def client_ready(self, client, db):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞ Telethon. –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        self.client = client
        self._db = db
        await self._load_state()


    async def _edit_and_delete(self, message, text, delay):
        """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –∂–¥–µ—Ç –∑–∞–¥–µ—Ä–∂–∫—É, –∑–∞—Ç–µ–º —É–¥–∞–ª—è–µ—Ç –µ–≥–æ.
        –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç None message –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –º–µ—Ç–æ–¥–∞ edit.
        """
        if message is None:
            logger.warning("–ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å None message.")
            return

        message_to_delete = message

        try:
            if hasattr(message, 'edit'):
                 try:
                      await message.edit(text, parse_mode='html')
                 except errors.MessageNotModifiedError:
                      logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message.id} –≤ —á–∞—Ç–µ {message.chat_id} –Ω–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ.")
                      pass
                 except Exception as e:
                      logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message.id} –≤ —á–∞—Ç–µ {message.chat_id}: {type(e).__name__} - {e}")
                      fallback_message = await self._safe_answer_message(message, text)
                      if fallback_message:
                           message_to_delete = fallback_message

            else:
                 logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message.id if hasattr(message, 'id') else 'N/A'} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
                 sent = await self._safe_answer_message(message, text)
                 if sent:
                      message_to_delete = sent


            await asyncio.sleep(delay)

        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ _edit_and_delete –≤–æ –≤—Ä–µ–º—è —ç—Ç–∞–ø–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/–æ–∂–∏–¥–∞–Ω–∏—è —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º {message.id if message else 'None'}: {type(e).__name__} - {e}")


        try:
            if message_to_delete and hasattr(message_to_delete, 'delete') and not getattr(message_to_delete, 'deleted', False):
                 await message_to_delete.delete()
        except (errors.MessageDeleteForbiddenError, errors.MessageIdInvalidError, TypeError) as e:
             logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_to_delete.id if message_to_delete else 'N/A'} –≤ —á–∞—Ç–µ {message_to_delete.chat_id if message_to_delete else 'N/A'}: {type(e).__name__} - {e}. –í–µ—Ä–æ—è—Ç–Ω–æ, –Ω–µ—Ç –ø—Ä–∞–≤ –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ.")
        except Exception as e:
             logger.warning(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_to_delete.id if message_to_delete else 'N/A'} –≤ —á–∞—Ç–µ {message_to_delete.chat_id if message_to_delete else 'N/A'}: {type(e).__name__} - {e}")

        pass


    async def _resolve_entity_and_get_id(self, identifier):
        """–ü—ã—Ç–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å—É—â–Ω–æ—Å—Ç—å (—á–∞—Ç, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) –ø–æ ID, —é–∑–µ—Ä–Ω–µ–π–º—É –∏–ª–∏ —Å—Å—ã–ª–∫–µ.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (entity.id, entity) –∏–ª–∏ (None, None) –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
        entity.id –±—É–¥–µ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø/—Ñ–æ—Ä—É–º–æ–≤.
        """
        try:
            resolved_identifier = identifier
            if isinstance(identifier, str):
                 try:
                     resolved_identifier = int(identifier)
                 except ValueError:
                     pass
            elif isinstance(identifier, (int, float)):
                 resolved_identifier = int(identifier)

            entity = await self.client.get_entity(resolved_identifier)

            chat_id = telethon_utils.get_peer_id(entity)

            return chat_id, entity
        except errors.RPCError as e:
             logger.error(f"API –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—É—â–Ω–æ—Å—Ç–∏ –¥–ª—è '{identifier}': {type(e).__name__} - {e}")
             return None, None
        except Exception as e:
            logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—É—â–Ω–æ—Å—Ç–∏ –¥–ª—è '{identifier}': {type(e).__name__} - {e}")
            return None, None

    async def _safe_answer_message(self, message, text):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç, –≥–¥–µ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞,
        –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ utils.answer_message.
        """
        try:
            if message is not None and hasattr(message, 'chat_id') and message.chat_id is not None:
                 sent_message = await self.client.send_message(message.chat_id, text, parse_mode='html')
                 return sent_message
            else:
                 logger.warning("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å safe_answer_message: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—ä–µ–∫—Ç –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, chat_id None –∏–ª–∏ –æ–±—ä–µ–∫—Ç None.")
                 return None
        except Exception as e:
            chat_id_display = message.chat_id if message is not None and hasattr(message, 'chat_id') and message.chat_id is not None else 'N/A'
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id_display}: {type(e).__name__} - {e}")
            return None

    @loader.command(ru_doc="‚ûï –î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç/—Ç–µ–º—É –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—ã–ª–∫–∏.\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n.add_chat - –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π —á–∞—Ç/—Ç–µ–º—É (–æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–º–µ).\n.add_chat <ID –∏–ª–∏ Username –∏–ª–∏ –°—Å—ã–ª–∫–∞> - –¥–æ–±–∞–≤–∏—Ç—å —á–∞—Ç –ø–æ –µ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É.")
    async def add_chat(self, message):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π —á–∞—Ç/—Ç–µ–º—É –∏–ª–∏ —á–∞—Ç –ø–æ ID/—é–∑–µ—Ä–Ω–µ–π–º—É/—Å—Å—ã–ª–∫–µ –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—ã–ª–∫–∏."""
        args = utils.get_args_raw(message).strip()
        target_chat_id = None
        target_topic_id = None
        chat_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Ç"
        entity = None
        initial_edit_message = None

        try:
            identifier_to_resolve = None
            reply = await message.get_reply_message()
            source_message = reply if reply is not None else message

            if args:
                identifier_to_resolve = args
                target_topic_id = None
            elif source_message is not None and source_message.chat_id is not None:
                 identifier_to_resolve = source_message.chat_id

                 if reply is not None and hasattr(reply, 'is_topic_message') and reply.is_topic_message:
                       if reply.reply_to and hasattr(reply.reply_to, 'reply_to_top_id') and reply.reply_to.reply_to_top_id is not None:
                           target_topic_id = reply.reply_to.reply_to_top_id
                           logger.debug(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω topic_id –∏–∑ reply_to_top_id: {target_topic_id} –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {reply.id}")
                       elif isinstance(reply, tl_types.MessageService) and isinstance(reply.action, tl_types.MessageActionTopicCreate):
                            target_topic_id = reply.id
                            logger.debug(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω topic_id –∫–∞–∫ ID –∫–æ—Ä–Ω–µ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {target_topic_id} –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {reply.id}")
                       elif reply.reply_to and hasattr(reply.reply_to, 'reply_to_msg_id') and reply.reply_to.reply_to_msg_id is not None:
                           target_topic_id = reply.reply_to.reply_to_msg_id
                           logger.debug(f"–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π topic_id (reply_to_msg_id): {target_topic_id} –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {reply.id}.")
                       else:
                            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å topic_id –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {reply.id} –≤ —á–∞—Ç–µ {source_message.chat_id}. –ë—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω —Ç–æ–ª—å–∫–æ —á–∞—Ç.")
                            target_topic_id = None


            initial_message_for_edit = message if message is not None else source_message
            initial_edit_message = await self._safe_answer_message(initial_message_for_edit, self.strings["processing_entity"])
            if initial_edit_message is None and message is not None:
                 initial_edit_message = message
            elif initial_edit_message is None and message is None:
                 logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –ò –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
                 return


            chat_id_resolved, entity = await self._resolve_entity_and_get_id(identifier_to_resolve)

            if entity is None or chat_id_resolved is None:
                 error_msg = self.strings["error_getting_entity"].format(f"–ù–µ–≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä '{identifier_to_resolve}' –∏–ª–∏ —Å—É—â–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                 if isinstance(identifier_to_resolve, (str, int, float)):
                     try:
                          id_num = int(str(identifier_to_resolve))
                          if id_num < -100:
                               error_msg += "\n–î–ª—è –≥—Ä—É–ø–ø/–∫–∞–Ω–∞–ª–æ–≤ —Å ID < -100 –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ —é–∑–µ—Ä–Ω–µ–π–º—É –∏–ª–∏ —Å—Å—ã–ª–∫–µ."
                     except (ValueError, TypeError):
                         pass

                 await self._edit_and_delete(initial_edit_message, error_msg, delay=5)
                 return

            target_chat_id = chat_id_resolved

            is_forum_channel = isinstance(entity, tl_types.Channel) and hasattr(entity, 'forum') and entity.forum
            if target_topic_id is not None and not is_forum_channel:
                 logger.warning(f"–£–∫–∞–∑–∞–Ω Topic ID {target_topic_id}, –Ω–æ —Å—É—â–Ω–æ—Å—Ç—å {get_display_name(entity)} (ID: {chat_id_resolved}) –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Forum-–∫–∞–Ω–∞–ª–æ–º. Topic ID –±—É–¥–µ—Ç –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω.")
                 target_topic_id = None


            chat_key = (target_chat_id, target_topic_id)

            async with self.lock:
                if chat_key in self.chats:
                    existing_name = self.chats.get(chat_key, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
                    await self._edit_and_delete(initial_edit_message, self.strings["chat_already_added"].format(existing_name), delay=3)
                    return

                chat_name_display = utils.escape_html(get_display_name(entity))
                if target_topic_id:
                    topic_title_display = f"Topic ID: {target_topic_id}"
                    if is_forum_channel:
                        try:
                             topic_start_msgs = await self.client.get_messages(entity=target_chat_id, ids=[target_topic_id])
                             topic_start_msg = topic_start_msgs[0] if topic_start_msgs else None

                             if topic_start_msg:
                                  if isinstance(topic_start_msg, tl_types.MessageService) and isinstance(topic_start_msg.action, tl_types.MessageActionTopicCreate):
                                       topic_title_display = f"Topic: '{utils.escape_html(topic_start_msg.action.title)}'"
                                  elif topic_start_msg.text:
                                       title_snippet = topic_start_msg.text[:50].replace('\n', ' ') + ('...' if len(topic_start_msg.text) > 50 else '')
                                       topic_title_display = f"Topic Snippet: '{utils.escape_html(title_snippet)}'"
                                  else:
                                      topic_title_display = f"Topic ID: {target_topic_id} (No Title)"

                             else:
                                topic_title_display = f"Topic ID: {target_topic_id} (Msg not found)"


                        except Exception as topic_e:
                            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–µ–º—ã {target_topic_id} –≤ —á–∞—Ç–µ {target_chat_id} –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: {type(topic_e).__name__} - {topic_e}")

                    chat_name_display = f"{chat_name_display} | {topic_title_display}"


                self.chats[chat_key] = chat_name_display
                valid_chats_to_save = {str(k): v for k, v in self.chats.items() if isinstance(k, tuple) and len(k) == 2}
                self._db.set(self.strings["name"], "chats", valid_chats_to_save)

                await self._edit_and_delete(initial_edit_message, self.strings["chat_added"].format(chat_name_display), delay=3)


        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ .add_chat:")
            final_message_target = initial_edit_message if initial_edit_message is not None else message
            await self._edit_and_delete(final_message_target, self.strings["error_getting_entity"].format(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {type(e).__name__} - {e}"), delay=5)


    @loader.command(ru_doc="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —á–∞—Ç/—Ç–µ–º—É –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ –µ–≥–æ –Ω–æ–º–µ—Ä—É (—Å–º–æ—Ç—Ä–µ—Ç—å –≤ .list_chats).\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .remove_chat <–Ω–æ–º–µ—Ä>")
    async def remove_chat(self, message):
        """–£–¥–∞–ª—è–µ—Ç —á–∞—Ç/—Ç–µ–º—É –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ –µ–≥–æ –Ω–æ–º–µ—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞ .list_chats."""
        args = utils.get_args_raw(message)
        if not args or not args.isdigit():
            await self._edit_and_delete(message, self.strings["invalid_chat_selection"], delay=3)
            return

        try:
            idx_to_remove = int(args) - 1
            async with self.lock:
                chat_keys = sorted([k for k in self.chats.keys() if isinstance(k, tuple) and len(k) == 2])
                if 0 <= idx_to_remove < len(chat_keys):
                    chat_key_to_remove = chat_keys[idx_to_remove]
                    removed_chat_name = self.chats.pop(chat_key_to_remove, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Ç")
                    valid_chats_to_save = {str(k): v for k, v in self.chats.items() if isinstance(k, tuple) and len(k) == 2}
                    self._db.set(self.strings["name"], "chats", valid_chats_to_save)
                    await self._edit_and_delete(message, self.strings["chat_removed"].format(idx_to_remove + 1, removed_chat_name), delay=3)
                else:
                    await self._edit_and_delete(message, self.strings["invalid_chat_selection"], delay=3)
        except (ValueError, IndexError):
             await self._edit_and_delete(message, self.strings["invalid_chat_selection"], delay=3)
        except Exception as e:
             logger.exception("–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ .remove_chat:")
             await self._edit_and_delete(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —á–∞—Ç–∞: {type(e).__name__} - {e}", delay=5)


    @loader.command(ru_doc="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —á–∞—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞")
    async def clear_chats(self, message):
        """–û—á–∏—â–∞–µ—Ç –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏."""
        async with self.lock:
            self.chats.clear()
            self._db.set(self.strings["name"], "chats", {})
            await self._edit_and_delete(message, self.strings["chats_cleared"], delay=3)

    @loader.command(ru_doc="üìú –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ —Å ID –∏ —Ç–µ–º–∞–º–∏")
    async def list_chats(self, message):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –∏ —Ç–µ–º, –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏, —Å –∏—Ö –Ω–æ–º–µ—Ä–∞–º–∏, –∏–º–µ–Ω–∞–º–∏, ID –∏ ID —Ç–µ–º."""
        valid_chats = {k: v for k, v in self.chats.items() if isinstance(k, tuple) and len(k) == 2}

        if not valid_chats:
            await self._edit_and_delete(message, self.strings["no_chats"], delay=12)
            if len(self.chats) > len(valid_chats):
                 logger.warning(f"–ü—Ä–∏ –≤—ã–≤–æ–¥–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ {len(self.chats) - len(valid_chats)} –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π.")
            return

        output = "<b>–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n\n"
        chat_num = 1
        sorted_chat_keys = sorted(valid_chats.keys())
        for chat_key in sorted_chat_keys:
            name = valid_chats.get(chat_key, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Ç")
            cid, topic_id = chat_key
            cid_display = str(cid)
            topic_display = str(topic_id) if topic_id is not None else '‚ùå'

            output += f"<b>{chat_num}.</b> {utils.escape_html(name)} (Chat ID: <code>{cid_display}</code> | Topic ID: <code>{topic_display}</code>)\n"
            chat_num += 1

        await self._edit_and_delete(message, output, delay=12)

    @loader.command(ru_doc="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (–æ—Ç–≤–µ—Ç–æ–º)")
    async def add_msg(self, message):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ (–æ—Ç–≤–µ—Ç–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –Ω–∞ –Ω—É–∂–Ω–æ–µ) –≤ —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏."""
        reply = await message.get_reply_message()
        if reply is None:
            await self._edit_and_delete(message, self.strings["no_messages"].split(". ")[0] + ".", delay=2)
            return

        async with self.lock:
            snippet_text = reply.text
            if not snippet_text:
                if reply.photo: snippet_text = "[Photo]"
                elif reply.video: snippet_text = "[Video]"
                elif reply.document: snippet_text = "[Document]"
                elif reply.sticker: snippet_text = "[Sticker]"
                elif reply.audio: snippet_text = "[Audio]"
                elif reply.voice: snippet_text = "[Voice]"
                elif reply.gif: snippet_text = "[GIF]"
                elif reply.contact: snippet_text = "[Contact]"
                elif reply.location: snippet_text = "[Location]"
                elif reply.venue: snippet_text = "[Venue]"
                elif reply.game: snippet_text = "[Game]"
                elif reply.invoice: snippet_text = "[Invoice]"
                elif reply.poll: snippet_text = "[Poll]"
                elif reply.web_preview and hasattr(reply.web_preview, 'title'): snippet_text = f"[Web Preview: {reply.web_preview.title or 'No Title'}]"
                elif isinstance(reply, tl_types.MessageService) and hasattr(reply.action, '__class__'): snippet_text = f"[Service Message: {type(reply.action).__name__}]"
                else: snippet_text = "[Unknown Content]"

            snippet_preview = str(snippet_text)[:100].replace('\n', ' ').replace('<', '<').replace('>', '>')
            snippet = snippet_preview + ("..." if len(str(snippet_text)) > 100 else "")

            source_chat_id = telethon_utils.get_peer_id(reply.chat_id)

            self.messages.append({
                "id": reply.id,
                "chat_id": source_chat_id,
                "snippet": snippet,
            })
            self._db.set(self.strings["name"], "messages", self.messages)
            await self._edit_and_delete(message, self.strings["message_added"].format(snippet), delay=3)

    @loader.command(ru_doc="‚ûñ –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –Ω–æ–º–µ—Ä—É")
    async def remove_msg(self, message):
        """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ –µ–≥–æ –Ω–æ–º–µ—Ä—É."""
        args = utils.get_args_raw(message)
        if not args or not args.isdigit():
            await self._edit_and_delete(message, self.strings["invalid_message_number"], delay=2)
            return

        try:
            idx = int(args) - 1
            async with self.lock:
                if 0 <= idx < len(self.messages):
                    removed_message = self.messages.pop(idx)
                    self._db.set(self.strings["name"], "messages", self.messages)
                    removed_snippet = removed_message.get('snippet', 'N/A')
                    removed_snippet_display = utils.escape_html(removed_snippet) if isinstance(removed_snippet, str) else str(removed_snippet)
                    await self._edit_and_delete(message, self.strings["message_removed"].format(idx + 1, removed_snippet_display), delay=3)
                else:
                    await self._edit_and_delete(message, self.strings["invalid_message_number"], delay=2)
        except (ValueError, IndexError):
             await self._edit_and_delete(message, self.strings["invalid_message_number"], delay=2)
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ .remove_msg:")
            await self._edit_and_delete(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {type(e).__name__} - {e}", delay=5)


    @loader.command(ru_doc="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π")
    async def clear_msgs(self, message):
        """–û—á–∏—â–∞–µ—Ç –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏."""
        async with self.lock:
            self.messages.clear()
            self._db.set(self.strings["name"], "messages", [])
            await self._edit_and_delete(message, self.strings["messages_cleared"], delay=3)

    @loader.command(ru_doc="üìú –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π")
    async def list_msgs(self, message):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π, –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏, —Å –∏—Ö –Ω–æ–º–µ—Ä–∞–º–∏, ID –∏ ID —á–∞—Ç–æ–≤."""
        if not self.messages:
            await self._edit_and_delete(message, self.strings["no_messages"], delay=12)
            return

        text = "<b>–°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n\n"
        for i, msg_info in enumerate(self.messages):
             if not isinstance(msg_info, dict) or "id" not in msg_info or "chat_id" not in msg_info:
                  logger.warning(f"–ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–ø–∏—Å–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º –ø—Ä–∏ –≤—ã–≤–æ–¥–µ: {msg_info}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                  text += f"<b>{i + 1}.</b> ‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è: {msg_info}\n"
                  continue

             preview = msg_info.get("snippet", "[Snippet N/A]")
             preview_display = utils.escape_html(preview) if isinstance(preview, str) else str(preview)
             text += f"<b>{i + 1}.</b> {preview_display} (ID: <code>{msg_info.get('id', 'N/A')}</code> –≤ —á–∞—Ç–µ <code>{msg_info.get('chat_id', 'N/A')}</code>)\n"

        await self._edit_and_delete(message, text, delay=12)

    @loader.command(ru_doc="‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ID —á–∞—Ç–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    async def set_seller(self, message):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç ID —á–∞—Ç–∞ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏/–æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏.
        –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ID, —é–∑–µ—Ä–Ω–µ–π–º, —Å—Å—ã–ª–∫—É –∏–ª–∏ 'me' –¥–ª—è —Å–≤–æ–µ–≥–æ —á–∞—Ç–∞ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ.
        """
        args = utils.get_args_raw(message).strip()
        if not args:
             await self._edit_and_delete(message, "‚úçÔ∏è –£–∫–∞–∂–∏—Ç–µ ID —á–∞—Ç–∞, —é–∑–µ—Ä–Ω–µ–π–º, —Å—Å—ã–ª–∫—É –∏–ª–∏ 'me'.", delay=3)
             return

        initial_edit_message = None
        try:
            identifier_to_resolve = None

            if args.lower() == 'me':
                identifier_to_resolve = self.client.tg_id
            else:
                 identifier_to_resolve = args

            if not (args.lower() == 'me' and message is not None and hasattr(message, 'chat_id') and message.chat_id == self.client.tg_id) and message is not None:
                 initial_edit_message = await self._safe_answer_message(message, self.strings["processing_entity"])
            elif message is not None:
                 initial_edit_message = message
            else:
                 logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –ò –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
                 return


            seller_id_resolved, entity = await self._resolve_entity_and_get_id(identifier_to_resolve)

            if entity is None or seller_id_resolved is None:
                error_msg = self.strings["error_getting_entity"].format(f"–ù–µ–≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä '{identifier_to_resolve}' –∏–ª–∏ —Å—É—â–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                await self._edit_and_delete(initial_edit_message, error_msg, delay=5)
                return

            seller_id_to_set = seller_id_resolved

            async with self.lock:
                self.seller_chat_id = seller_id_to_set
                self._db.set(self.strings["name"], "seller_chat_id", str(self.seller_chat_id))
            seller_name = utils.escape_html(get_display_name(entity)) if entity is not None else str(seller_id_to_set)
            await self._edit_and_delete(initial_edit_message, self.strings["seller_set"] + f": {seller_name} (<code>{self.seller_chat_id}</code>)", delay=5)


        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ .set_seller:")
            final_message_target = initial_edit_message if initial_edit_message is not None else message
            await self._edit_and_delete(final_message_target, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {type(e).__name__} - {e}", delay=5)


    @loader.command(ru_doc="üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏")
    async def mail_status(self, message):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞–ø—É—â–µ–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏, –ø—Ä–æ—à–µ–¥—à–µ–µ/–æ—Å—Ç–∞—é—â–µ–µ—Å—è –≤—Ä–µ–º—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
        logger.info(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ .mail_status –≤ —á–∞—Ç–µ {message.chat_id}")
        try:
            async with self.lock:
                is_running_status = self.is_running
                start_time_status = self.start_time
                end_time_status = self.end_time
                total_messages_sent_status = self.total_messages_sent
                chats_count_status = len(self.chats)
                safe_mode_status = self.module_config['safe_mode']
                mail_task_active = (self.mail_task is not None and not self.mail_task.done())
                current_cycle_start_time_status = self._current_cycle_start_time
                processed_chats_in_cycle_status = self._processed_chats_in_cycle


            if not is_running_status and not mail_task_active:
                 status_text = self.strings["mail_not_running"] + "\n"
            elif not is_running_status and mail_task_active:
                 status_text = "üìä <b>–°—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏:</b> –ù–ï –ê–ö–¢–ò–í–ù–ê ‚èπÔ∏è (–∑–∞–¥–∞—á–∞ –≤—Å–µ –µ—â–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ?)\n"
            elif is_running_status and not mail_task_active:
                 status_text = "üìä <b>–°—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏:</b> –û–ñ–ò–î–ê–ù–ò–ï –ó–ê–î–ê–ß–ò ‚è∏Ô∏è (—Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–µ–Ω, –Ω–æ –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞)\n"
            else: # is_running_status is True and mail_task_active
                status_text = f"üìä <b>–°—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏:</b> –ê–ö–¢–ò–í–ù–ê ‚úÖ\n"


            now = datetime.now()
            if is_running_status and start_time_status is not None and end_time_status is not None:
                 elapsed = now - start_time_status if now > start_time_status else timedelta(0)
                 remaining = end_time_status - now if end_time_status > now else timedelta(0)

                 def format_timedelta(td):
                     total_seconds = int(td.total_seconds())
                     if total_seconds < 0: total_seconds = 0
                     hours, remainder = divmod(total_seconds, 3600)
                     minutes, seconds = divmod(remainder, 60)
                     return f"{hours}:{minutes:02}:{seconds:02}"

                 status_text += (
                     f"‚è≥ <b>–ü—Ä–æ—à–ª–æ:</b> {format_timedelta(elapsed)}\n"
                     f"‚è±Ô∏è <b>–û—Å—Ç–∞–ª–æ—Å—å:</b> {format_timedelta(remaining)}\n"
                 )
                 if current_cycle_start_time_status is not None:
                     cycle_elapsed = now - current_cycle_start_time_status if now > current_cycle_start_time_status else timedelta(0)
                     status_text += f"üîÑ <b>–í —Ü–∏–∫–ª–µ:</b> {format_timedelta(cycle_elapsed)}, –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —á–∞—Ç–æ–≤: {processed_chats_in_cycle_status}\n"
                 else:
                     status_text += f"üîÑ <b>–í —Ü–∏–∫–ª–µ:</b> –û–∂–∏–¥–∞–Ω–∏–µ —Å—Ç–∞—Ä—Ç–∞ —Ü–∏–∫–ª–∞...\n"


            status_text += (
                f"‚úâÔ∏è <b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —Ç–µ–∫—É—â–∏–π –∑–∞–ø—É—Å–∫:</b> {total_messages_sent_status}\n"
                f"üéØ <b>–í—Å–µ–≥–æ —á–∞—Ç–æ–≤ –≤ —Å–ø–∏—Å–∫–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:</b> {chats_count_status}\n"
                f"üíæ <b>–†–µ–∂–∏–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:</b> {'–í–ö–õ' if safe_mode_status else '–í–´–ö–õ'}"
            )
            await self._edit_and_delete(message, status_text, delay=60)
            logger.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã .mail_status")

        except Exception as e:
            logger.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ .mail_status:")
            try:
                 await self._safe_answer_message(message, f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ —Å—Ç–∞—Ç—É—Å–∞: {type(e).__name__} - {e}")
            except Exception:
                 logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")


    async def _is_safe_chat(self, entity: tl_types.TypePeer) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—É—â–Ω–æ—Å—Ç—å –≥—Ä—É–ø–ø–æ–π, –∫–∞–Ω–∞–ª–æ–º –∏–ª–∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–æ–π/—Ñ–æ—Ä—É–º–æ–º (–¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞).
        –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å—É—â–Ω–æ—Å—Ç–∏ (User, Chat, Channel).
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —ç—Ç–æ –ù–ï –ª–∏—á–Ω—ã–π —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ò –ù–ï –ò–∑–±—Ä–∞–Ω–Ω–æ–µ.
        """
        is_user = isinstance(entity, tl_types.User)

        return isinstance(entity, (tl_types.Chat, tl_types.Channel))


    async def _send_to_chat(self, target_chat_id: int, msg_info: dict, target_topic_id: int | None = None) -> tuple[bool, str]:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç/—Ç–µ–º—É —Å —Ä–µ—Ç—Ä–∞—è–º–∏ –ø—Ä–∏ FloodWait.
        target_chat_id: ID —á–∞—Ç–∞/–∫–∞–Ω–∞–ª–∞/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        target_topic_id: ID —Ç–µ–º—ã (–ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–º–µ) –∏–ª–∏ None. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ target_chat_id - Forum-–∫–∞–Ω–∞–ª.
        msg_info: {"id": original_msg_id, "chat_id": original_chat_id, "snippet": "..."}
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂: (—É—Å–ø–µ—Ö - True/False, –ø—Ä–∏—á–∏–Ω–∞ –Ω–µ—É–¥–∞—á–∏ –∏–ª–∏ "OK").
        –ü—Ä–∏—á–∏–Ω–∞ –Ω–µ—É–¥–∞—á–∏ - —ç—Ç–æ str —Å –∏–º–µ–Ω–µ–º —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "ChatForbiddenError").
        """
        original_chat_id = msg_info.get("chat_id")
        original_msg_id = msg_info.get("id")
        msg_snippet = msg_info.get("snippet", "N/A")[:50] + '...'

        if original_chat_id is None or original_msg_id is None:
             reason = f"–ù–µ–≤–µ—Ä–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {msg_info}"
             logger.error(f"[{target_chat_id}:{target_topic_id if target_topic_id is not None else 'N/A'}] {reason}")
             return (False, reason)

        original_msg = None
        try:
            original_msg_list = await self.client.get_messages(original_chat_id, ids=[original_msg_id])
            original_msg = original_msg_list[0] if original_msg_list else None

            if not original_msg:
                reason = f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {original_msg_id} –≤ —á–∞—Ç–µ {original_chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ."
                logger.warning(f"[{target_chat_id}:{target_topic_id if target_topic_id is not None else 'N/A'}] {reason}")
                return (False, reason)
        except Exception as e:
             reason = f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è {original_msg_id} –∏–∑ —á–∞—Ç–∞ {original_chat_id}: {type(e).__name__} - {e}"
             logger.error(f"[{target_chat_id}:{target_topic_id if target_topic_id is not None else 'N/A'}] {reason}")
             return (False, reason)


        retries = 5
        try:
            for attempt in range(retries):
                try:
                    await self.client.send_message(
                         entity=target_chat_id,
                         message=original_msg,
                         reply_to=target_topic_id
                    )
                    self.total_messages_sent += 1
                    logger.debug(f"[{target_chat_id}:{target_topic_id if target_topic_id is not None else 'N/A'}] –°–æ–æ–±—â–µ–Ω–∏–µ '{msg_snippet}' (ID: {original_msg_id}) —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
                    return (True, "OK")

                except errors.FloodWaitError as e:
                    wait_time = e.seconds
                    logger.warning(f"[{target_chat_id}:{target_topic_id if target_topic_id is not None else 'N/A'}] FloodWait! –ñ–¥–µ–º {wait_time} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è '{msg_snippet}' (ID: {original_msg_id}). –ü–æ–ø—ã—Ç–∫–∞ {attempt+1}/{retries}...")
                    if attempt < retries - 1:
                        await asyncio.sleep(wait_time + random.uniform(1, 3))
                    else:
                         reason = f"FloodWait after {retries} attempts ({wait_time}s)"
                         logger.error(f"[{target_chat_id}:{target_topic_id if target_topic_id is not None else 'N/A'}] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ '{msg_snippet}' (ID: {original_msg_id}): {reason}.")
                         return (False, reason)
                except errors.SlowModeWaitError as e:
                     wait_time = e.seconds
                     reason = type(e).__name__
                     logger.warning(f"[{target_chat_id}:{target_topic_id if target_topic_id is not None else 'N/A'}] {reason} –≤ —á–∞—Ç–µ. O–∂–∏–¥–∞–Ω–∏–µ {wait_time} —Å–µ–∫ –ø–µ—Ä–µ–¥ –ø—Ä–æ–ø—É—Å–∫–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è '{msg_snippet}' (ID: {original_msg_id}).")
                     await asyncio.sleep(wait_time + random.uniform(0.5, 1.5))
                     return (False, reason)

                except errors.RPCError as e:
                     reason = type(e).__name__
                     logger.error(self.strings["error_sending_message"].format(original_msg_id, target_chat_id, target_topic_id if target_topic_id is not None else 'N/A', f"{reason} - {e}"))
                     return (False, reason)

                except Exception as e:
                     reason = type(e).__name__
                     logger.exception(self.strings["error_sending_message"].format(original_msg_id, target_chat_id, target_topic_id if target_topic_id is not None else 'N/A', f"Unexpected error - {e}"))
                     return (False, reason)

        except Exception as outer_e:
             reason = f"Critical error before/during retry loop: {type(outer_e).__name__} - {outer_e}"
             logger.exception(f"[{target_chat_id}:{target_topic_id if target_topic_id is not None else 'N/A'}] {reason}")
             return (False, reason)


        reason = "UnHandled finish case in _send_to_chat"
        logger.error(f"[{target_chat_id}:{target_topic_id if target_topic_id is not None else 'N/A'}] {reason} for message {original_msg_id}. Assuming failure.")
        return (False, reason)

    async def _mail_loop(self, duration_seconds: int, cycle_interval_seconds_range: tuple[float, float], initial_command_message):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞—Å—Å—ã–ª–∫–∏. –ò—Ç–µ—Ä–∏—Ä—É–µ—Ç—Å—è –ø–æ —á–∞—Ç–∞–º, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞.
        duration_seconds: –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.
        cycle_interval_seconds_range: –ö–æ—Ä—Ç–µ–∂ (min, max) –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏.
        initial_command_message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –≤—ã–∑–≤–∞–≤—à–µ–≥–æ start_mail, –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞.
        """
        start_time_loop = datetime.now()
        end_time_loop = start_time_loop + timedelta(seconds=duration_seconds)
        logger.info(f"–¶–∏–∫–ª —Ä–∞—Å—Å—ã–ª–∫–∏ –∑–∞–ø—É—â–µ–Ω. –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_seconds} —Å–µ–∫. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {end_time_loop.strftime('%Y-%m-%d %H:%M:%S')}")

        final_status_message = self.strings["mailing_complete"]
        seller_notification_text = ""
        seller_chat_id_at_start = None
        total_sent_in_run = 0


        try:
            async with self.lock:
                 seller_chat_id_at_start = self.seller_chat_id
                 total_sent_at_start = self.total_messages_sent


            while self.is_running and datetime.now() < end_time_loop:
                self._current_cycle_start_time = datetime.now()
                self._processed_chats_in_cycle = 0

                async with self.lock:
                     current_chats_keys = list(self.chats.keys())
                     current_messages = list(self.messages)
                     is_safe = self.module_config['safe_mode']
                     max_chunks = self.module_config['max_chunks']
                     short_interval_base = self.module_config['short_interval_base']
                     safe_short_interval = self.module_config['safe_short_interval']
                     safe_cycle_interval = self.module_config['safe_cycle_interval']
                     safe_message_interval = self.module_config['safe_message_interval']
                     base_message_interval = self.module_config['base_message_interval']


                max_chats_this_cycle = max_chunks if is_safe else len(current_chats_keys)
                short_interval_range = safe_short_interval if is_safe else short_interval_base
                cycle_interval_range_actual = safe_cycle_interval if is_safe else cycle_interval_seconds_range
                message_interval_range = safe_message_interval if is_safe else base_message_interval


                if not current_chats_keys:
                     logger.warning("–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø—É—Å—Ç –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–ª–∞–≥–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ is_running=False.")
                     self.is_running = False
                     final_status_message = "‚ö†Ô∏è –†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –ø—É—Å—Ç."
                     seller_notification_text = f"{self.strings['seller_notification']} (–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –ø—É—Å—Ç)"
                     break
                if not current_messages:
                     logger.warning("–°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø—É—Å—Ç –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–ª–∞–≥–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ is_running=False.")
                     self.is_running = False
                     final_status_message = "‚ö†Ô∏è –†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø—É—Å—Ç."
                     seller_notification_text = f"{self.strings['seller_notification']} (–°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø—É—Å—Ç)"
                     break


                random.shuffle(current_chats_keys)

                chats_keys_to_process_in_this_cycle = current_chats_keys[:min(max_chunks if is_safe else len(current_chats_keys), len(current_chats_keys))]
                logger.info(f"–ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ ({datetime.now().strftime('%H:%M:%S')}). –í—Å–µ–≥–æ —á–∞—Ç–æ–≤ –≤ —Å–ø–∏—Å–∫–µ: {len(current_chats_keys)}. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(chats_keys_to_process_in_this_cycle)} —á–∞—Ç–æ–≤ –≤ —ç—Ç–æ–º —Ü–∏–∫–ª–µ.")


                for i, chat_key in enumerate(chats_keys_to_process_in_this_cycle):
                    if not self.is_running or datetime.now() >= end_time_loop:
                        logger.info("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ –∫–æ–º–∞–Ω–¥–æ –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞—Ç–æ–≤.")
                        break

                    if not isinstance(chat_key, tuple) or len(chat_key) != 2:
                         logger.warning(f"–ù–∞–π–¥–µ–Ω —á–∞—Ç —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –∫–ª—é—á–æ–º –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {chat_key}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —á–∞—Ç.")
                         continue

                    chat_id, topic_id = chat_key
                    chat_name = self.chats.get(chat_key, f"ID: {chat_id}")
                    entity = None

                    logger.info(f"–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ —á–∞—Ç: {chat_name} (ID: {chat_id}, Topic: {topic_id if topic_id is not None else 'N/A'})")

                    skip_chat = False

                    try:
                         entity = await self.client.get_entity(chat_id)
                         if is_safe and not self._is_safe_chat(entity):
                             logger.info(f"[Safe Mode] –ü—Ä–æ–ø—É—Å–∫ —á–∞—Ç–∞ {chat_name} (ID: {chat_id}) - –Ω–µ –≥—Ä—É–ø–ø–∞/–∫–∞–Ω–∞–ª.")
                             skip_chat = True

                         if not skip_chat and topic_id is not None and isinstance(entity, tl_types.User):
                              logger.warning(f"–£–∫–∞–∑–∞–Ω Topic ID {topic_id} –¥–ª—è –ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞ {chat_name} (ID: {chat_id}). Topic ID –±—É–¥–µ—Ç –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ.")

                    except Exception as get_entity_e:
                          logger.exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç —Å—É—â–Ω–æ—Å—Ç–∏ –¥–ª—è —á–∞—Ç–∞ {chat_name} (ID: {chat_id}): {type(get_entity_e).__name__} - {get_entity_e}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —á–∞—Ç.")
                          skip_chat = True
                          entity = None


                    if skip_chat:
                        self._processed_chats_in_cycle += 1
                        continue


                    logger.info(f"–ù–∞—á–∞–ª–æ –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç: {chat_name} (ID: {chat_id}, Topic: {topic_id if topic_id is not None else 'N/A'})")

                    sent_count_in_chat = 0
                    messages_to_send_count = len(current_messages)

                    shuffled_messages = list(current_messages)
                    if len(shuffled_messages) > 1:
                         random.shuffle(shuffled_messages)

                    permission_denied_in_chat = False

                    for msg_to_send in shuffled_messages:
                         if not self.is_running or datetime.now() >= end_time_loop:
                             logger.info("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤–æ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.")
                             break

                         success, reason = await self._send_to_chat(chat_id, msg_to_send, topic_id)

                         if success:
                              sent_count_in_chat += 1
                              total_sent_in_run += 1

                              if (self.is_running and datetime.now() < end_time_loop and
                                  sent_count_in_chat < messages_to_send_count):
                                   wait_msg = random.uniform(message_interval_range[0], message_interval_range[1])
                                   logger.debug(f"–ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –≤ —á–∞—Ç–µ {chat_name}: {wait_msg:.2f} —Å–µ–∫.")
                                   await asyncio.sleep(wait_msg)
                         else:
                              if reason in self.PERMISSION_ERRORS:
                                  logger.warning(self.strings["permission_denied_skip"].format(
                                      chat_name, chat_id, topic_id if topic_id is not None else 'N/A', reason
                                  ))
                                  permission_denied_in_chat = True
                                  break

                              logger.warning(f"–ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç {chat_name} (ID: {chat_id}, Topic: {topic_id if topic_id is not None else 'N/A'}) –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è {msg_to_send.get('id', 'N/A')}. –ü—Ä–∏—á–∏–Ω–∞ (–Ω–µ –ø—Ä–∞–≤–∞): {reason}")
                              break


                    if not self.is_running or datetime.now() >= end_time_loop:
                        logger.info("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ.")
                        break

                    if sent_count_in_chat > 0 or permission_denied_in_chat:
                         self._processed_chats_in_cycle += 1


                    if (self.is_running and datetime.now() < end_time_loop and
                        i < len(chats_keys_to_process_in_this_cycle) - 1 and
                        not permission_denied_in_chat):
                        wait_short = random.uniform(short_interval_range[0], short_interval_range[1])
                        logger.debug(f"–ü–∞—É–∑–∞ –º–µ–∂–¥—É —á–∞—Ç–∞–º–∏ –≤ —Ü–∏–∫–ª–µ: {wait_short:.2f} —Å–µ–∫.")
                        await asyncio.sleep(wait_short)

                if not self.is_running or datetime.now() >= end_time_loop:
                     logger.info("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ —Ü–∏–∫–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞—Ç–æ–≤.")
                     break

                if self.is_running and datetime.now() < end_time_loop and len(chats_keys_to_process_in_this_cycle) > 0:
                    wait_cycle = random.uniform(cycle_interval_range_actual[0], cycle_interval_range_actual[1])
                    remaining_time_seconds = (end_time_loop - datetime.now()).total_seconds()

                    actual_wait = max(0.0, min(wait_cycle, remaining_time_seconds))

                    if actual_wait > 0:
                         logger.info(f"–ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏: {actual_wait:.2f} —Å–µ–∫ (–∏–∑ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö {wait_cycle:.2f} —Å–µ–∫).")
                         await asyncio.sleep(actual_wait)
                    else:
                         logger.info("–û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ 0. –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ –≤—Ä–µ–º–µ–Ω–∏.")
                         break
                elif self.is_running and datetime.now() < end_time_loop and len(chats_keys_to_process_in_this_cycle) == 0:
                     logger.warning("–í —Ç–µ–∫—É—â–µ–º —Ü–∏–∫–ª–µ –Ω–µ—Ç —á–∞—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–≤–æ–∑–º–æ–∂–Ω–æ, —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç –∏–ª–∏ –≤—Å–µ –ø—Ä–æ–ø—É—â–µ–Ω—ã). –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏ –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
                     pass


            logger.info("–ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª —Ä–∞—Å—Å—ã–ª–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω.")

            if datetime.now() >= end_time_loop and (self.is_running or total_sent_in_run > 0):
                 final_status_message = self.strings["mailing_complete"] + " (–ø–æ –≤—Ä–µ–º–µ–Ω–∏)"
                 seller_notification_text = f"{self.strings['seller_notification']} (–ó–∞–≤–µ—Ä—à–µ–Ω–æ –ø–æ –≤—Ä–µ–º–µ–Ω–∏)"
                 logger.info("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏.")
            elif not self.is_running:
                 if "–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞" not in final_status_message and "–∑–∞–≤–µ—Ä—à–µ–Ω–∞" not in final_status_message:
                       final_status_message = self.strings["stopped_mailing"] + " (–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ)"
                       seller_notification_text = f"{self.strings['seller_notification']} (–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ)"
                 logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ —Ñ–ª–∞–≥—É is_running=False. –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å: '{final_status_message}'")
            else:
                 logger.error(f"–ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª —Ä–∞—Å—Å—ã–ª–∫–∏ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º. is_running={self.is_running}, now={datetime.now()}, end_time={end_time_loop}")
                 final_status_message = "‚ö†Ô∏è –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º."
                 seller_notification_text = f"‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º."


        except asyncio.CancelledError:
             logger.info("–ó–∞–¥–∞—á–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞ CancelledError.")
             final_status_message = self.strings["stopped_mailing"] + " (–û—Ç–º–µ–Ω–µ–Ω–æ)"
             seller_notification_text = f"{self.strings['seller_notification']} (–û—Ç–º–µ–Ω–µ–Ω–æ)"
        except Exception as e:
             logger.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏ (–æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤–Ω–µ—à–Ω–∏–º except):")
             final_status_message = f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {type(e).__name__}. –†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞."
             seller_notification_text = f"‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ä–∞—Å—Å—ã–ª–∫–µ: {type(e).__name__} - {e}"
        finally:
             logger.info("–ù–∞—á–∞–ª–æ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏ —Ä–∞—Å—Å—ã–ª–∫–∏...")

             async with self.lock:
                  self.is_running = False
                  self.mail_task = None
                  self._current_cycle_start_time = None
                  self._processed_chats_in_cycle = 0
                  self.total_messages_sent = 0

             try:
                  if initial_command_message is not None and hasattr(initial_command_message, 'chat_id') and initial_command_message.chat_id is not None:
                       target_user_chat = initial_command_message.chat_id
                       final_status_with_count = f"{final_status_message} (–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —ç—Ç–æ—Ç –∑–∞–ø—É—Å–∫: {total_sent_in_run})"
                       await self.client.send_message(target_user_chat, final_status_with_count, parse_mode='html')
                       logger.info(f"–§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ —á–∞—Ç {target_user_chat}.")
                  else:
                       logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—ä–µ–∫—Ç –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã, chat_id None –∏–ª–∏ –æ–±—ä–µ–∫—Ç None.")
                       try:
                            await self.client.send_message(self.client.tg_id, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ö–æ–¥–Ω—ã–π —á–∞—Ç.\n–°—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏: {final_status_message} (–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —ç—Ç–æ—Ç –∑–∞–ø—É—Å–∫: {total_sent_in_run})", parse_mode='html')
                            logger.info("–§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ –∫–∞–∫ fallback.")
                       except Exception as e_fav:
                            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–∞–∂–µ –≤ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ ({self.client.tg_id}): {type(e_fav).__name__} - {e_fav}")

             except Exception as e:
                  logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {initial_command_message.chat_id if initial_command_message is not None and hasattr(initial_command_message, 'chat_id') else 'N/A'}: {type(e).__name__} - {e}")


             if seller_chat_id_at_start is not None:
                 try:
                      seller_chat_id_int = int(seller_chat_id_at_start)
                      seller_notification_with_count = f"{seller_notification_text} (–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —ç—Ç–æ—Ç –∑–∞–ø—É—Å–∫: {total_sent_in_run})"
                      await self.client.send_message(seller_chat_id_int, seller_notification_with_count, parse_mode='html')
                      logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–¥–∞–≤—Ü—É {seller_chat_id_int}.")
                 except (ValueError, TypeError):
                      logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç seller_chat_id ({seller_chat_id_at_start}) –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü—É.")
                 except Exception as e:
                     logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü—É {seller_chat_id_at_start}: {type(e).__name__} - {e}")

             logger.info("–§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


    @loader.command(ru_doc="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É: .start_mail <–≤—Ä–µ–º—è_—Å–µ–∫> <–∏–Ω—Ç–µ—Ä–≤–∞–ª_—Ü–∏–∫–ª–∞_–æ—Ç-–¥–æ_—Å–µ–∫>")
    async def start_mail(self, message):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —Å–ø–∏—Å–∫—É —á–∞—Ç–æ–≤.
        –¢—Ä–µ–±—É–µ—Ç —É–∫–∞–∑–∞–Ω–∏—è –æ–±—â–µ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø–∞—É–∑—ã –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏ –æ–±—Ö–æ–¥–∞ —á–∞—Ç–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 180-300).
        """
        logger.info(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ .start_mail —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏: {utils.get_args_raw(message)} –≤ —á–∞—Ç–µ {message.chat_id}")
        initial_edit_message = None

        try:
            args = utils.get_args(message)
            if len(args) != 2:
                 initial_edit_message = await self._safe_answer_message(message, self.strings["duration_invalid"])
                 if initial_edit_message is None and message is not None: initial_edit_message = message
                 elif initial_edit_message is None and message is None: logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏ –Ω–µ—Ç message."); return
                 await self._edit_and_delete(initial_edit_message, initial_edit_message.text, delay=5)
                 logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã .start_mail: –Ω–µ–≤–µ—Ä–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã.")
                 return

            duration = None
            cycle_interval_input = None

            try:
                duration = int(args[0])
                if duration <= 0:
                     initial_edit_message = await self._safe_answer_message(message, f"{self.strings['duration_invalid']}\n–û—à–∏–±–∫–∞: –í—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.")
                     if initial_edit_message is None and message is not None: initial_edit_message = message
                     elif initial_edit_message is None and message is None: logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏ –Ω–µ—Ç message."); return
                     await self._edit_and_delete(initial_edit_message, initial_edit_message.text, delay=5)
                     logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã .start_mail: –Ω–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è.")
                     return

                interval_parts = args[1].split("-")
                if len(interval_parts) != 2:
                    initial_edit_message = await self._safe_answer_message(message, f"{self.strings['duration_invalid']}\n–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ (–æ–∂–∏–¥–∞–µ—Ç—Å—è –æ—Ç-–¥–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 45-70).")
                    if initial_edit_message is None and message is not None: initial_edit_message = message
                    elif initial_edit_message is None and message is None: logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏ –Ω–µ—Ç message."); return
                    await self._edit_and_delete(initial_edit_message, initial_edit_message.text, delay=5)
                    logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã .start_mail: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞.")
                    return

                try:
                    start_float = float(interval_parts[0])
                    end_float = float(interval_parts[1])
                    if not (0 <= start_float <= end_float):
                        initial_edit_message = await self._safe_answer_message(message, f"{self.strings['duration_invalid']}\n–û—à–∏–±–∫–∞: –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª, –≥–¥–µ –ø–µ—Ä–≤–æ–µ <= –≤—Ç–æ—Ä–æ–º—É.")
                        if initial_edit_message is None and message is not None: initial_edit_message = message
                        elif initial_edit_message is None and message is None: logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏ –Ω–µ—Ç message."); return
                        await self._edit_and_delete(initial_edit_message, initial_edit_message.text, delay=5)
                        logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã .start_mail: –Ω–µ–≤–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞.")
                        return
                    cycle_interval_input = (start_float, end_float)
                except (ValueError, TypeError):
                    initial_edit_message = await self._safe_answer_message(message, f"{self.strings['duration_invalid']}\n–û—à–∏–±–∫–∞: –ó–Ω–∞—á–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.")
                    if initial_edit_message is None and message is not None: initial_edit_message = message
                    elif initial_edit_message is None and message is None: logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏ –Ω–µ—Ç message."); return
                    await self._edit_and_delete(initial_edit_message, initial_edit_message.text, delay=5)
                    logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã .start_mail: –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–µ —á–∏—Å–ª–∞.")
                    return

            except Exception as e:
                initial_edit_message = await self._safe_answer_message(message, f"{self.strings['duration_invalid']}\n–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤: {type(e).__name__} - {e}")
                if initial_edit_message is None and message is not None: initial_edit_message = message
                elif initial_edit_message is None and message is None: logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏ –Ω–µ—Ç message."); return
                await self._edit_and_delete(initial_edit_message, initial_edit_message.text, delay=5)
                logger.exception("–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –≤ .start_mail:")
                logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã .start_mail: –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞.")
                return


            if initial_edit_message is None:
                initial_edit_message = await self._safe_answer_message(message, self.strings["processing_entity"])
                if initial_edit_message is None and message is not None:
                    initial_edit_message = message
                elif initial_edit_message is None and message is None:
                     logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ 'processing_entity' –∏ –Ω–µ—Ç –∏—Å—Ö–æ–¥–Ω–æ–≥–æ message –¥–ª—è fallback.")
                     return


            async with self.lock:
                if not self.chats:
                    await self._edit_and_delete(initial_edit_message, self.strings["chats_empty"], delay=3)
                    logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã .start_mail: —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –ø—É—Å—Ç.")
                    return
                if not self.messages:
                    await self._edit_and_delete(initial_edit_message, self.strings["messages_empty"], delay=3)
                    logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã .start_mail: —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø—É—Å—Ç.")
                    return
                task_exists_and_running = (self.mail_task is not None and not self.mail_task.done())
                if self.is_running or task_exists_and_running:
                    await self._edit_and_delete(initial_edit_message, self.strings["already_running"], delay=3)
                    logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã .start_mail: —Ä–∞—Å—Å—ã–ª–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞.")
                    return

                self.is_running = True
                self.total_messages_sent = 0
                self.start_time = datetime.now()
                self.end_time = self.start_time + timedelta(seconds=duration)
                self._current_cycle_start_time = None
                self._processed_chats_in_cycle = 0


                is_safe_display = self.module_config['safe_mode']
                short_interval_disp = self.module_config['safe_short_interval'] if is_safe_display else self.module_config['short_interval_base']
                message_interval_disp = self.module_config['safe_message_interval'] if is_safe_display else self.module_config['base_message_interval']
                cycle_interval_disp = self.module_config['safe_cycle_interval'] if is_safe_display else cycle_interval_input


                start_message_text = self.strings["started_mailing"].format(
                    duration,
                    f"{cycle_interval_disp[0]:.2f}", f"{cycle_interval_disp[1]:.2f}",
                    f"{short_interval_disp[0]:.2f}", f"{short_interval_disp[1]:.2f}",
                    f"{message_interval_disp[0]:.2f}", f"{message_interval_disp[1]:.2f}"
                )
                if is_safe_display:
                    safe_mode_indicator_line = self.strings["safe_mode_enabled"].format(
                           self.module_config['max_chunks'],
                           f"{self.module_config['safe_short_interval'][0]:.2f}", f"{self.module_config['safe_short_interval'][1]:.2f}",
                           f"{self.module_config['safe_cycle_interval'][0]:.2f}", f"{self.module_config['safe_cycle_interval'][1]:.2f}",
                           f"{self.module_config['safe_message_interval'][0]:.2f}", f"{self.module_config['safe_message_interval'][1]:.2f}"
                      ).split('\n')[0]
                    start_message_text = f"{start_message_text}\n{safe_mode_indicator_line}"

                await self._edit_and_delete(initial_edit_message, start_message_text, delay=20)


                actual_cycle_interval_for_loop = self.module_config['safe_cycle_interval'] if is_safe_display else cycle_interval_input

                self.mail_task = asyncio.create_task(
                     self._mail_loop(duration, actual_cycle_interval_for_loop, message),
                     name="MaillingChatGT99Fix_MailLoopTask"
                )
                logger.info(f"–ó–∞–¥–∞—á–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –∑–∞–ø—É—â–µ–Ω–∞: {self.mail_task.get_name()}")

            logger.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã .start_mail: –∑–∞–¥–∞—á–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–∑–¥–∞–Ω–∞ –∏ –∑–∞–ø—É—â–µ–Ω–∞.")

        except Exception as e:
            logger.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ .start_mail:")
            final_message_target = initial_edit_message if initial_edit_message is not None else message
            try:
                 await self._edit_and_delete(final_message_target, f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏: {type(e).__name__} - {e}", delay=10)
            except Exception:
                 logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∑–∞–ø—É—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")


    @loader.command(ru_doc="‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
    async def stop_mail(self, message):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∑–∞–ø—É—â–µ–Ω–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É."""
        logger.info(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ .stop_mail –≤ —á–∞—Ç–µ {message.chat_id}")
        try:
            task_to_cancel = None
            is_task_done_before_cancel = False

            async with self.lock:
                task_exists_and_running = (self.mail_task is not None and not self.mail_task.done())

                if not self.is_running and not task_exists_and_running:
                     await self._edit_and_delete(message, self.strings["not_running"], delay=2)
                     logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã .stop_mail: —Ä–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.")
                     return

                logger.info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏...")
                self.is_running = False

                if self.mail_task is not None:
                     is_task_done_before_cancel = self.mail_task.done()
                     if not is_task_done_before_cancel:
                          task_to_cancel = self.mail_task
                     else:
                          logger.warning("–ó–∞–¥–∞—á–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ —É–∂–µ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, —Å –æ—à–∏–±–∫–æ–π) –¥–æ –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–º–µ–Ω—ã.")
                else:
                     logger.warning("–ó–∞–¥–∞—á–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (self.mail_task is None) –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏, —Ö–æ—Ç—è is_running –±—ã–ª True. –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ.")
                     self.is_running = False
                     self.start_time = None
                     self.end_time = None
                     self._current_cycle_start_time = None
                     self._processed_chats_in_cycle = 0


            if task_to_cancel is not None:
                 task_to_cancel.cancel()
                 logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω–∞ –æ—Ç–º–µ–Ω–∞ –∑–∞–¥–∞—á–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ {task_to_cancel.get_name()} –º–µ—Ç–æ–¥–æ–º task.cancel().")

                 await self._edit_and_delete(message, self.strings["stopped_mailing"], delay=10)
                 logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –û–∂–∏–¥–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ —Ä–∞—Å—Å—ã–ª–∫–∏.")
            elif is_task_done_before_cancel:
                 await self._edit_and_delete(message, self.strings["stopped_mailing"] + " (–£–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞)", delay=10)
                 logger.warning("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ, –Ω–æ –∑–∞–¥–∞—á–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —É–∂–µ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
                 async with self.lock:
                     self.is_running = False
                     self.mail_task = None
                     self.start_time = None
                     self.end_time = None
                     self._current_cycle_start_time = None
                     self._processed_chats_in_cycle = 0
                 logger.info("–°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–±—Ä–æ—à–µ–Ω–æ –ø–æ—Å–ª–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏.")
           

            logger.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã .stop_mail")

        except Exception as e:
            logger.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ .stop_mail:")
            try:
                 await self._safe_answer_message(message, f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏: {type(e).__name__} - {e}")
            except Exception:
                 logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
