__version__ = (4, 0, 0)

# meta developer: @SenkoGuardianModules

#  .------. .------. .------. .------. .------. .------.
#  |S.--. | |E.--. | |N.--. | |M.--. | |O.--. | |D.--. |
#  | :/\: | | :/\: | | :(): | | :/\: | | :/\: | | :/\: |
#  | :\/: | | :\/: | | ()() | | :\/: | | :\/: | | :\/: |
#  | '--'S| | '--'E| | '--'N| | '--'M| | '--'O| | '--'D|
#  `------' `------' `------' `------' `------' `------'

from .. import loader, utils
import asyncio
import json
from datetime import datetime, timedelta
from telethon.utils import get_display_name
import logging
import random
import re

from telethon import errors

logger = logging.getLogger(__name__)

@loader.tds
class MaillingChatGT99Mod(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —á–∞—Ç–∞–º v4 (–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤—Å–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π –∞ —Ç–∞–∫ —É –Ω–µ–≥–æ –∂–µ –±–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞)"""
    strings = {
        "name": "MaillingChatGT99",
        "add_chat": "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π —á–∞—Ç",
        "remove_chat": "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤",
        "list_chats": "üìú –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤",
        "add_msg": "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ",
        "remove_msg": "‚ûñ –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ",
        "clear_msgs": "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π",
        "list_msgs": "üìú –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π",
        "set_seller": "‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ID –ø—Ä–æ–¥–∞–≤—Ü–∞",
        "mail_status": "üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å",
        "start_mail": "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É",
        "stop_mail": "‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É",
        "error_getting_entity": "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ: {}",
        "error_sending_message": "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {} ({}): {}",
        "notification_sent": "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.",
        "invalid_arguments": "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: .start_mail <–≤—Ä–µ–º—è_—Å–µ–∫> <–∏–Ω—Ç–µ—Ä–≤–∞–ª_—Ü–∏–∫–ª–∞_–æ—Ç-–¥–æ_—Å–µ–∫>",
        "chats_empty": "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —á–∞—Ç—ã.",
        "messages_empty": "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è.",
        "already_running": "‚ö†Ô∏è –†–∞—Å—Å—ã–ª–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞.",
        "started_mailing": "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞.\n‚è≥ –û–±—â–µ–µ –≤—Ä–µ–º—è: {} —Å–µ–∫.\n‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏: {}-{} —Å–µ–∫.\n‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —á–∞—Ç–∞–º–∏: ~{}-{} —Å–µ–∫.\n‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –≤ —á–∞—Ç–µ: ~{}-{} —Å–µ–∫.",
        "stopped_mailing": "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.",
        "not_running": "‚ö†Ô∏è –†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.",
        "chat_added": "‚úÖ –ß–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—ã–ª–∫–∏",
        "chat_removed": "‚úÖ {} {} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏",
        "invalid_chat_selection": "‚õîÔ∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —á–∞—Ç–∞ –∏–ª–∏ –Ω–æ–º–µ—Ä. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'group' –∏–ª–∏ 'private' –∏ –Ω–æ–º–µ—Ä —á–∞—Ç–∞.",
        "invalid_chat_number": "‚õîÔ∏è –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —á–∞—Ç–∞.",
        "chats_cleared": "‚úÖ –í—Å–µ —á–∞—Ç—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞",
        "messages_cleared": "‚úÖ –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—á–∏—â–µ–Ω",
        "no_chats": "üìÉ –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –ø—É—Å—Ç",
        "no_messages": "‚úçÔ∏è –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫",
        "message_added": "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ (Snippet: {})",
        "message_removed": "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ ‚Ññ{} —É–¥–∞–ª–µ–Ω–æ (Snippet: {})",
        "invalid_message_number": "‚úçÔ∏è –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è",
        "seller_set": "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–∞—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞",
        "duration_invalid": "‚úçÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .start_mail <–≤—Ä–µ–º—è_—Å–µ–∫> <–∏–Ω—Ç–µ—Ä–≤–∞–ª_—Ü–∏–∫–ª–∞_–æ—Ç-–¥–æ_—Å–µ–∫>. –£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 45-70).",
        "seller_notification": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
        "mailing_complete": "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
        "safe_mode_enabled": "üü¢ <b>–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º –í–ö–õ–Æ–ß–Å–ù</b>\n‚Ä¢ –¢–æ–ª—å–∫–æ –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª—ã\n‚Ä¢ –ú–∞–∫—Å {} —á–∞—Ç–æ–≤/—Ü–∏–∫–ª\n‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —á–∞—Ç–∞–º–∏: ~10-20 —Å–µ–∫\n‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏: ~180-300 —Å–µ–∫\n‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –≤ —á–∞—Ç–µ: ~{}-{} —Å–µ–∫",
        "safe_mode_disabled": "üî¥ <b>–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º –í–´–ö–õ–Æ–ß–ï–ù</b>",
        "mail_not_running": "‚ö†Ô∏è –†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞",
        "no_permission": "Ô∏èÔ∏èÔ∏èÔ∏èÔ∏èÔ∏èÔ∏èÔ∏èÔ∏èÔ∏èÔ∏èÔ∏è‚ö†Ô∏è –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –≤ —á–∞—Ç {} ({}), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.",
        "safe_message_interval": (5, 10),
        "base_message_interval": (1, 3)
    }

    def __init__(self):
        self.chats = {}
        self.messages = []
        self.mail_task = None
        self.seller_chat_id = None
        self.total_messages_sent = 0
        self.start_time = None
        self.end_time = None
        self.is_running = False
        self.lock = asyncio.Lock()
        self.module_config = {
            "safe_mode": False,
            "max_chunks": 10,
            "short_interval_base": (2, 5),
            "safe_short_interval": (10, 20),
            "safe_cycle_interval": (180, 300),
            "safe_message_interval": self.strings["safe_message_interval"],
            "base_message_interval": self.strings["base_message_interval"],
        }

    def _validate_interval_tuple(self, value, default_tuple):
        if (isinstance(value, (list, tuple)) and
                len(value) == 2 and
                all(isinstance(i, int) for i in value) and
                0 < value[0] <= value[1]):
            return tuple(value)
        logger.warning(f"–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ '{value}' –≤ –∫–æ–Ω—Ñ–∏–≥–µ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç: {default_tuple}")
        return default_tuple

    async def client_ready(self, client, db):
        self.client = client
        self._db = db
        stored_chats_raw = db.get(self.strings["name"], "chats", {})
        self.chats = {}

        if isinstance(stored_chats_raw, dict):
             for key, name in stored_chats_raw.items():
                 try:
                     if isinstance(key, str) and key.startswith("(") and key.endswith(")"):
                         chat_id_str, topic_id_str = key.strip("()").split(",")
                         chat_id = int(chat_id_str)
                         topic_id = int(topic_id_str.strip()) if topic_id_str.strip().lower() != 'none' else None
                         self.chats[(chat_id, topic_id)] = name
                     else:
                         chat_id = int(key)
                         self.chats[(chat_id, None)] = name
                 except (ValueError, TypeError) as e:
                     logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–ª—é—á —á–∞—Ç–∞ '{key}': {e}")
        elif isinstance(stored_chats_raw, list):
             for i, chat_id_or_key in enumerate(stored_chats_raw):
                try:
                    chat_id = int(chat_id_or_key)
                    self.chats[(chat_id, None)] = f"Chat {i+1} (old format)"
                except ValueError:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Ç–∞: {chat_id_or_key}")

        self._db.set(self.strings["name"], "chats", {str(k): v for k, v in self.chats.items()})

        self.messages = db.get(self.strings["name"], "messages", [])
        self.messages = [msg for msg in self.messages if isinstance(msg, dict) and all(k in msg for k in ["id", "chat_id", "snippet"])]

        saved_config = db.get(self.strings["name"], "config", {})
        self.module_config["safe_mode"] = saved_config.get("safe_mode", self.module_config["safe_mode"])
        self.module_config["max_chunks"] = saved_config.get("max_chunks", self.module_config["max_chunks"])
        self.module_config["short_interval_base"] = self._validate_interval_tuple(
            saved_config.get("short_interval_base"), self.module_config["short_interval_base"]
        )
        self.module_config["safe_short_interval"] = self._validate_interval_tuple(
            saved_config.get("safe_short_interval"), self.module_config["safe_short_interval"]
        )
        self.module_config["safe_cycle_interval"] = self._validate_interval_tuple(
            saved_config.get("safe_cycle_interval"), self.module_config["safe_cycle_interval"]
        )
        self.module_config["safe_message_interval"] = self._validate_interval_tuple(
            saved_config.get("safe_message_interval"), self.module_config["safe_message_interval"]
        )
        self.module_config["base_message_interval"] = self._validate_interval_tuple(
            saved_config.get("base_message_interval"), self.module_config["base_message_interval"]
        )
        self._db.set(self.strings["name"], "config", self.module_config)

        self.seller_chat_id = db.get(self.strings["name"], "seller_chat_id", None)
        if self.seller_chat_id:
            try: self.seller_chat_id = int(self.seller_chat_id)
            except ValueError: self.seller_chat_id = None

    async def _edit_and_delete(self, message, text, delay):
        try:
            await message.edit(text)
            await asyncio.sleep(delay)
            if message and not getattr(message, 'deleted', False):
                await message.delete()
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message.id}: {e}")

    @loader.command(ru_doc="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π —á–∞—Ç/—Ç–µ–º—É –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ (–æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–º–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–º—ã)")
    async def add_chat(self, message):
        async with self.lock:
            target_chat_id = message.chat_id
            target_topic_id = getattr(message.reply_to, 'reply_to_top_id', None)

            reply = await message.get_reply_message()
            if reply:
                target_chat_id = reply.chat_id
                if target_chat_id > 0: target_chat_id = -abs(target_chat_id)
                target_topic_id = getattr(reply.reply_to, 'reply_to_top_id', None) or reply.id if reply.is_topic_message else None

            chat_key = (target_chat_id, target_topic_id)

            if chat_key in self.chats:
                await self._edit_and_delete(message, "‚ö†Ô∏è –ß–∞—Ç/—Ç–µ–º–∞ —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ.", delay=2)
                return

            try:
                entity = await self.client.get_entity(target_chat_id)
                chat_name = utils.escape_html(get_display_name(entity))
                if target_topic_id:
                    try:
                        topic_start_msg = await self.client.get_messages(target_chat_id, ids=target_topic_id)
                        if topic_start_msg and topic_start_msg.action and hasattr(topic_start_msg.action, 'title'):
                            topic_title = topic_start_msg.action.title
                            chat_name = f"{chat_name} | {utils.escape_html(topic_title)}"
                        else:
                             chat_name = f"{chat_name} | Topic ID: {target_topic_id}"
                    except Exception as topic_e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–µ–º—ã {target_topic_id} –≤ —á–∞—Ç–µ {target_chat_id}: {topic_e}")
                        chat_name = f"{chat_name} | Topic ID: {target_topic_id}"
            except Exception as e:
                logger.warning(self.strings["error_getting_entity"].format(e))
                chat_name = f"Unknown Chat (ID: {target_chat_id})"
                if target_topic_id: chat_name += f" | Topic ID: {target_topic_id}"

            self.chats[chat_key] = chat_name
            self._db.set(self.strings["name"], "chats", {str(k): v for k, v in self.chats.items()})
            await self._edit_and_delete(message, self.strings["chat_added"], delay=2)

    @loader.command(ru_doc="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —á–∞—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞")
    async def clear_chats(self, message):
        async with self.lock:
            self.chats.clear()
            self._db.set(self.strings["name"], "chats", {})
            await self._edit_and_delete(message, self.strings["chats_cleared"], delay=3)

    @loader.command(ru_doc="üìú –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ —Å ID –∏ —Ç–µ–º–∞–º–∏")
    async def list_chats(self, message):
        if not self.chats:
            await self._edit_and_delete(message, self.strings["no_chats"], delay=12)
            return

        output = "<b>–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n\n"
        chat_num = 1
        for chat_key, name in self.chats.items():
            cid, topic_id = chat_key
            output += f"<b>{chat_num}.</b> {name} (ID: <code>{cid}</code> | Topic: <code>{topic_id if topic_id else '‚ùå'}</code>)\n"
            chat_num += 1

        await self._edit_and_delete(message, output, delay=12)

    @loader.command(ru_doc="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (–æ—Ç–≤–µ—Ç–æ–º)")
    async def add_msg(self, message):
        reply = await message.get_reply_message()
        if not reply:
            await self._edit_and_delete(message, self.strings["no_messages"], delay=2)
            return

        async with self.lock:
            snippet_text = reply.text or "[Media]"
            snippet = snippet_text[:30].replace('\n', ' ') + ("..." if len(snippet_text) > 30 else "")
            self.messages.append({
                "id": reply.id,
                "chat_id": reply.chat_id,
                "snippet": snippet
            })
            self._db.set(self.strings["name"], "messages", self.messages)
            await self._edit_and_delete(message, self.strings["message_added"].format(snippet), delay=2)

    @loader.command(ru_doc="‚ûñ –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –Ω–æ–º–µ—Ä—É")
    async def remove_msg(self, message):
        args = utils.get_args_raw(message)
        if not args.isdigit():
            await self._edit_and_delete(message, self.strings["invalid_message_number"], delay=2)
            return

        try:
            idx = int(args) - 1
            async with self.lock:
                if 0 <= idx < len(self.messages):
                    removed_message = self.messages.pop(idx)
                    self._db.set(self.strings["name"], "messages", self.messages)
                    await self._edit_and_delete(message, self.strings["message_removed"].format(idx + 1, removed_message['snippet']), delay=2)
                else:
                    await self._edit_and_delete(message, self.strings["invalid_message_number"], delay=2)
        except ValueError:
            await self._edit_and_delete(message, self.strings["invalid_message_number"], delay=2)

    @loader.command(ru_doc="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π")
    async def clear_msgs(self, message):
        async with self.lock:
            self.messages.clear()
            self._db.set(self.strings["name"], "messages", [])
            await self._edit_and_delete(message, self.strings["messages_cleared"], delay=3)

    @loader.command(ru_doc="üìú –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π")
    async def list_msgs(self, message):
        if not self.messages:
            await self._edit_and_delete(message, self.strings["no_messages"].replace("–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã", "–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π."), delay=12)
            return

        text = "<b>–°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n\n"
        for i, msg_info in enumerate(self.messages):
             msg_text_cleaned = "[–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è]"
             try:
                  original_msg = await self.client.get_messages(msg_info["chat_id"], ids=msg_info["id"])
                  if original_msg:
                      if original_msg.text:
                          # Attempt to render basic text and replace known emoji/custom emoji tags
                          msg_text_content = original_msg.text
                          msg_text_cleaned = msg_text_content
                          # This is complex; Telethon's .text *contains* the tags.
                          # Proper rendering requires Telegram client logic or parsing entities.
                          # For a simple preview, we'll replace tags with placeholders.
                          # This won't show the *actual* premium emoji in the list message itself,
                          # as that requires Telegram's rendering, but it cleans up the raw tags.
                          msg_text_cleaned = re.sub(r"<emoji document_id=\d+>", "[Emoji]", msg_text_cleaned)
                          msg_text_cleaned = re.sub(r"<custom_emoji id=\d+>", "[C_Emoji]", msg_text_cleaned)
                          # Catch any other leftover <tags> that might appear unexpectedly
                          msg_text_cleaned = re.sub(r"<.+?>", "", msg_text_cleaned)


                      elif original_msg.media:
                           msg_text_cleaned = "[Media]"
                      else:
                           msg_text_cleaned = "[–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ]"
                  else:
                       msg_text_cleaned = "[–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ? (ID –Ω–µ –Ω–∞–π–¥–µ–Ω)]"
             except errors.MessageIdInvalidError:
                  msg_text_cleaned = "[–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ? (ID –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω)]"
             except Exception:
                  logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–ø–∏—Å–∫–∞: chat_id={msg_info.get('chat_id')}, id={msg_info.get('id')}")
                  msg_text_cleaned = "[–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–û—à–∏–±–∫–∞)]"


             preview = msg_text_cleaned[:30].replace('\n', ' ') + ("..." if len(msg_text_cleaned) > 30 else "")
             text += f"<b>{i + 1}.</b> {utils.escape_html(preview)} (ID: <code>{msg_info['id']}</code> –≤ —á–∞—Ç–µ <code>{msg_info['chat_id']}</code>)\n"

        await self._edit_and_delete(message, text, delay=12)

    @loader.command(ru_doc="‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ID —á–∞—Ç–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    async def set_seller(self, message):
        args = utils.get_args_raw(message)
        try:
            if args.lower() == 'me':
                seller_id = self.client.tg_id
            else:
                seller_id = int(args)
            async with self.lock:
                self.seller_chat_id = seller_id
                self._db.set(self.strings["name"], "seller_chat_id", self.seller_chat_id)
            await self._edit_and_delete(message, self.strings["seller_set"], delay=5)
        except ValueError:
            await self._edit_and_delete(message, "‚úçÔ∏è –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —á–∞—Ç–∞ –∏–ª–∏ 'me'.", delay=2)

    @loader.command(ru_doc="üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏")
    async def mail_status(self, message):
        if not self.is_running:
            await self._edit_and_delete(message, self.strings["mail_not_running"], delay=60)
            return

        now = datetime.now()
        if not self.start_time or not self.end_time:
            await self._edit_and_delete(message, "‚ö†Ô∏è –°—Ç–∞—Ç—É—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.", delay=60)
            return

        elapsed = now - self.start_time
        remaining = self.end_time - now if self.end_time > now else timedelta(0)

        status_text = (
            f"üìä <b>–°—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏:</b> {'–ê–ö–¢–ò–í–ù–ê ‚úÖ' if self.is_running else '–ù–ï –ê–ö–¢–ò–í–ù–ê ‚èπÔ∏è'}\n"
            f"‚è≥ <b>–ü—Ä–æ—à–ª–æ:</b> {str(elapsed).split('.')[0]}\n"
            f"‚è±Ô∏è <b>–û—Å—Ç–∞–ª–æ—Å—å:</b> {str(remaining).split('.')[0]}\n"
            f"‚úâÔ∏è <b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π:</b> {self.total_messages_sent}\n"
            f"üéØ <b>–í—Å–µ–≥–æ —á–∞—Ç–æ–≤ –≤ —Å–ø–∏—Å–∫–µ:</b> {len(self.chats)}\n"
            f"üíæ <b>–†–µ–∂–∏–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:</b> {'–í–ö–õ' if self.module_config['safe_mode'] else '–í–´–ö–õ'}"
        )
        await self._edit_and_delete(message, status_text, delay=60)

    async def _is_safe_chat(self, chat_id):
        try:
            entity = await self.client.get_entity(chat_id)
            return hasattr(entity, 'username') or hasattr(entity, 'title')
        except Exception as e:
             logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∏–ø —á–∞—Ç–∞ {chat_id}: {e}")
             return False

    async def _send_to_chat(self, target_chat_id, msg_info, target_topic_id=None):
        try:
            original_msg = await self.client.get_messages(msg_info["chat_id"], ids=msg_info["id"])
            if not original_msg:
                logger.warning(f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_info['id']} –≤ —á–∞—Ç–µ {msg_info['chat_id']} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                return False

            await self.client.send_message(
                 entity=target_chat_id,
                 message=original_msg,
                 reply_to=target_topic_id
            )
            self.total_messages_sent += 1
            return True
        except (errors.ChatForbiddenError, errors.UserBannedInChannelError, errors.ChatWriteForbiddenError) as e:
             logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {target_chat_id} (–ó–∞–ø—Ä–µ—â–µ–Ω–æ/–ù–µ—Ç –ø—Ä–∞–≤): {e}")
             return False
        except errors.SlowModeWaitError:
             logger.warning(f"Slow mode –≤ —á–∞—Ç–µ {target_chat_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
             return False
        except errors.FloodWaitError as e:
             try: wait_time = int(re.search(r'(\d+)', str(e)).group(1))
             except: wait_time = 30
             logger.critical(f"FloodWait! –ñ–¥–µ–º {wait_time} —Å–µ–∫—É–Ω–¥...")
             await asyncio.sleep(wait_time + 5)
             return await self._send_to_chat(target_chat_id, msg_info, target_topic_id)
        except Exception as e:
             logger.exception(self.strings["error_sending_message"].format(target_chat_id, target_topic_id if target_topic_id else '', e))
             return False

    async def _mail_loop(self, duration_seconds, cycle_interval_seconds, message):
        start_time_loop = datetime.now()
        end_time_loop = start_time_loop + timedelta(seconds=duration_seconds)
        logger.info(f"–¶–∏–∫–ª —Ä–∞—Å—Å—ã–ª–∫–∏ –∑–∞–ø—É—â–µ–Ω. –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_seconds} —Å–µ–∫.")

        while self.is_running and datetime.now() < end_time_loop:
            current_chats_keys = list(self.chats.keys())
            random.shuffle(current_chats_keys)
            processed_chats_in_cycle = 0
            logger.info(f"–ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ {len(current_chats_keys)} —á–∞—Ç–∞–º.")

            is_safe = self.module_config['safe_mode']
            short_interval = self.module_config['safe_short_interval'] if is_safe else self.module_config['short_interval_base']
            current_cycle_interval = self.module_config['safe_cycle_interval'] if is_safe else cycle_interval_seconds
            max_chats_this_cycle = self.module_config['max_chunks'] if is_safe else len(current_chats_keys)
            message_interval = self.module_config['safe_message_interval'] if is_safe else self.module_config['base_message_interval']


            logger.info(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ü–∏–∫–ª–∞: SafeMode={is_safe}, MaxChats={max_chats_this_cycle}, ShortInterval={short_interval}, CycleInterval={current_cycle_interval}, MessageInterval={message_interval}")

            for chat_key in current_chats_keys:
                if not self.is_running:
                    logger.info("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤–æ –≤—Ä–µ–º—è —Ü–∏–∫–ª–∞ –ø–æ —á–∞—Ç–∞–º.")
                    break
                if processed_chats_in_cycle >= max_chats_this_cycle:
                    logger.info(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —á–∞—Ç–æ–≤ ({max_chats_this_cycle}) –¥–ª—è —ç—Ç–æ–≥–æ —Ü–∏–∫–ª–∞.")
                    break

                chat_id, topic_id = chat_key
                chat_name = self.chats.get(chat_key, f"ID: {chat_id}")

                if is_safe and not await self._is_safe_chat(chat_id):
                    logger.info(f"[Safe Mode] –ü—Ä–æ–ø—É—Å–∫ –ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞: {chat_name}")
                    continue

                all_messages_sent_to_chat = True
                sent_count_in_chat = 0

                if not self.messages:
                     logger.warning("–°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø—É—Å—Ç. –¶–∏–∫–ª –ø—Ä–µ—Ä–≤–∞–Ω.")
                     all_messages_sent_to_chat = False
                     break

                for msg_to_send in self.messages:
                     if not self.is_running: break
                     logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è '{msg_to_send.get('snippet', '...')}' -> {chat_name} (Topic: {topic_id})")

                     success = await self._send_to_chat(chat_id, msg_to_send, topic_id)

                     if success:
                          sent_count_in_chat += 1
                          if self.is_running and len(self.messages) > 1 and sent_count_in_chat < len(self.messages):
                               wait_msg = random.uniform(message_interval[0], message_interval[1])
                               logger.debug(f"–ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –≤ —á–∞—Ç–µ {chat_name}: {wait_msg:.2f} —Å–µ–∫.")
                               await asyncio.sleep(wait_msg)
                     else:
                          all_messages_sent_to_chat = False
                          logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ '{msg_to_send.get('snippet', '...')}' –≤ {chat_name}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞ –≤ —ç—Ç–æ–º —Ü–∏–∫–ª–µ.")
                          break


                if not self.is_running: break

                if all_messages_sent_to_chat and len(self.messages) > 0:
                    processed_chats_in_cycle += 1

                if self.is_running and processed_chats_in_cycle < max_chats_this_cycle and chat_key != current_chats_keys[-1]:
                    wait_short = random.uniform(short_interval[0], short_interval[1])
                    logger.debug(f"–ü–∞—É–∑–∞ –º–µ–∂–¥—É —á–∞—Ç–∞–º–∏: {wait_short:.2f} —Å–µ–∫.")
                    await asyncio.sleep(wait_short)


            if not self.is_running: break

            logger.info(f"–¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —á–∞—Ç–æ–≤ —Å –ø–æ–ª–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–æ–π: {processed_chats_in_cycle}.")

            if processed_chats_in_cycle >= max_chats_this_cycle or (processed_chats_in_cycle == len(current_chats_keys) and len(current_chats_keys) > 0):
                wait_cycle = random.randint(current_cycle_interval[0], current_cycle_interval[1])
                if datetime.now() + timedelta(seconds=wait_cycle) >= end_time_loop:
                     remaining_time = (end_time_loop - datetime.now()).total_seconds()
                     if remaining_time > 1:
                          logger.info(f"–û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è ({remaining_time:.0f} —Å–µ–∫) –º–µ–Ω—å—à–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —Ü–∏–∫–ª–∞ ({wait_cycle} —Å–µ–∫). –ñ–¥–µ–º –æ—Å—Ç–∞—Ç–æ–∫.")
                          await asyncio.sleep(remaining_time)
                     else:
                          logger.info("–û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏—Å—Ç–µ–∫–ª–æ.")
                     break

                logger.info(f"–ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏: {wait_cycle} —Å–µ–∫.")
                await asyncio.sleep(wait_cycle)
            else:
                 logger.info("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —á–∞—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ —ç—Ç–æ–º —Ü–∏–∫–ª–µ –¥–ª—è –ø–æ–ª–Ω–æ–π –ø–∞—É–∑—ã —Ü–∏–∫–ª–∞.")


        logger.info("–¶–∏–∫–ª —Ä–∞—Å—Å—ã–ª–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        if self.is_running:
             if self.seller_chat_id:
                 try:
                     await self.client.send_message(self.seller_chat_id, f"{self.strings['seller_notification']} (–ó–∞–≤–µ—Ä—à–µ–Ω–æ –ø–æ –≤—Ä–µ–º–µ–Ω–∏)")
                     logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–¥–∞–≤—Ü—É {self.seller_chat_id}.")
                 except Exception as e:
                     logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü—É: {e}")
             await message.reply(self.strings["mailing_complete"])


        async with self.lock:
             self.is_running = False
             self.mail_task = None
             self.start_time = None
             self.end_time = None

    @loader.command(ru_doc="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É: .start_mail <–≤—Ä–µ–º—è_—Å–µ–∫> <–∏–Ω—Ç–µ—Ä–≤–∞–ª_—Ü–∏–∫–ª–∞_–æ—Ç-–¥–æ_—Å–µ–∫>")
    async def start_mail(self, message):
        args = utils.get_args(message)
        if len(args) != 2:
            await self._edit_and_delete(message, self.strings["duration_invalid"], delay=3)
            return

        try:
            duration = int(args[0])
            interval_range = args[1].split("-")
            if len(interval_range) != 2: raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞")
            cycle_interval = (int(interval_range[0]), int(interval_range[1]))
            if not (0 < duration and 0 < cycle_interval[0] <= cycle_interval[1]):
                 raise ValueError("–í—Ä–µ–º—è –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏, '–æ—Ç' <= '–¥–æ'")
        except ValueError as e:
            await self._edit_and_delete(message, f"{self.strings['duration_invalid']}\n–û—à–∏–±–∫–∞: {e}", delay=3)
            return

        async with self.lock:
            if not self.chats:
                await self._edit_and_delete(message, self.strings["chats_empty"], delay=2)
                return
            if not self.messages:
                await self._edit_and_delete(message, self.strings["messages_empty"], delay=2)
                return
            if self.is_running:
                await self._edit_and_delete(message, self.strings["already_running"], delay=2)
                return

            self.is_running = True
            self.total_messages_sent = 0
            self.start_time = datetime.now()
            self.end_time = self.start_time + timedelta(seconds=duration)

            short_interval_disp = self.module_config['safe_short_interval'] if self.module_config['safe_mode'] else self.module_config['short_interval_base']
            message_interval_disp = self.module_config['safe_message_interval'] if self.module_config['safe_mode'] else self.module_config['base_message_interval']

            await self._edit_and_delete(
                message,
                self.strings["started_mailing"].format(
                    duration,
                    cycle_interval[0], cycle_interval[1],
                    short_interval_disp[0], short_interval_disp[1],
                    message_interval_disp[0], message_interval_disp[1]
                ),
                delay=20
            )

            self.mail_task = asyncio.create_task(self._mail_loop(duration, cycle_interval, message))

    @loader.command(ru_doc="‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
    async def stop_mail(self, message):
        async with self.lock:
            if not self.is_running or not self.mail_task:
                await self._edit_and_delete(message, self.strings["not_running"], delay=2)
                return

            logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ...")
            self.is_running = False
            self.mail_task.cancel()

            try:
                 await asyncio.wait_for(self.mail_task, timeout=5.0)
            except asyncio.CancelledError:
                 logger.info("–ó–∞–¥–∞—á–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            except asyncio.TimeoutError:
                 logger.warning("–ó–∞–¥–∞—á–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –∑–∞ 5 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã.")
            except Exception as e:
                 logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")

            self.mail_task = None
            self.start_time = None
            self.end_time = None

            await self._edit_and_delete(message, self.strings["stopped_mailing"], delay=10)

            if self.seller_chat_id:
                try:
                    await self.client.send_message(self.seller_chat_id, f"{self.strings['seller_notification']} (–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä—É—á–Ω—É—é)")
                    logger.info(self.strings["notification_sent"])
                except Exception as e:
                    logger.error(self.strings["error_sending_message"].format("seller chat", self.seller_chat_id, e))

    @loader.command(ru_doc="üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º: .safe_mode [on/off]. –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —á–∞—Ç—ã.")
    async def safe_mode(self, message):
        args = utils.get_args_raw(message).lower()
        new_state = None

        if args in ("on", "–≤–∫–ª", "1", "–¥–∞", "y", "yes"): new_state = True
        elif args in ("off", "–≤—ã–∫–ª", "0", "–Ω–µ—Ç", "n", "no"): new_state = False
        elif not args: new_state = not self.module_config["safe_mode"]
        else:
            await self._edit_and_delete(message, "üö´ –ò—Å–ø–æ–ª—å–∑—É–π: <code>.safe_mode on/off</code>", delay=2)
            return

        async with self.lock:
            self.module_config["safe_mode"] = new_state
            self._db.set(self.strings["name"], "config", self.module_config)

        message_interval_disp = self.module_config['safe_message_interval'] if new_state else self.module_config['base_message_interval']
        status_msg = self.strings["safe_mode_enabled"].format(self.module_config['max_chunks'], message_interval_disp[0], message_interval_disp[1]) if new_state else self.strings["safe_mode_disabled"]
        await self._edit_and_delete(message, status_msg, delay=6)
